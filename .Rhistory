###Author: Jeff Graham
###Date: March 30, 2018
###This file creates and HTML table of scoresheet stats and emails the results
#Create Report
source('C:/Users/Jeff/Documents/Scoresheet Stats/scoresheet_logs.R')
library(mailR)
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "scoresheet", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
###Author: Jeff Graham
###Date: March 30, 2018
###This file creates and HTML table of scoresheet stats and emails the results
#Create Report
source('C:/Users/Jeff/Documents/Scoresheet Stats/Code/scoresheet_logs.R')
library(mailR)
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "scoresheet", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
###Author: Jeff Graham
###Date: March 30, 2018
###This file creates and HTML table of scoresheet stats and emails the results
#Create Report
source('C:/Users/Jeff/Documents/Scoresheet Stats/Code/scoresheet_logs.R')
library(mailR)
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "superawesomes", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "superawesomes", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
###Author: Jeff Graham
###Date: March 30, 2018
###This file creates and HTML table of scoresheet stats and emails the results
setwd('C:/Users/Jeff/Documents/Scoresheet Stats')
#Create Report
source('C:/Users/Jeff/Documents/Scoresheet Stats/Code/scoresheet_logs.R')
library(mailR)
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("./Code/ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "superawesomes", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
#load packages
requirements<- c("dplyr", "knitr", "rvest", "XML", "magrittr")
for(requirement in requirements){if(!(requirement %in% installed.packages()))
install.packages(requirement)}
lapply(requirements, require, character.only=T)
setwd('C:/Users/Jeff/Documents/Scoresheet Stats')
#--------------------Create game log for position players-----------------------------
#Create table of players and IDs for fangraph links
player_id<-read.csv("./input/SS_position_players.csv", header=TRUE)
unique_id<-unique(player_id[,1:2]) #remove duplicate players (both teams)
my_data=NULL
#Scrape data and combine into a single file
for (i in unique_id[,2]) {
test=try(read_html(paste("http://www.fangraphs.com/statsd.aspx?playerid=",i,"&season=2018",sep="",collapse=NULL)),TRUE)
if(class(test)!= "try-error"){
x<-read_html(paste("http://www.fangraphs.com/statsd.aspx?playerid=",i,"&season=2018",sep="",collapse=NULL))
x<-x %>%
html_nodes("#DailyStats1_dgSeason1_ctl00")%>%html_table(header=NA, )
if(length(x) != 0) {
x<-subset(data.frame(x), !(data.frame(x)$Date=="Date" | data.frame(x)$Date=="Total"))#converts to a data frame and drops duplicate headers and season totals
x$BIS<-as.numeric(unique_id[match(i,unique_id$BIS),2]) #Add BIS Number from player list
x$BO<-as.numeric(x$BO)
x$PA<-as.numeric(x$PA)
x$H<-as.numeric(x$H)
x$X2B<-as.numeric(x$X2B)
x$X3B<-as.numeric(x$X3B)
x$HR<-as.numeric(x$HR)
x$R<-as.numeric(x$R)
x$RBI<-as.numeric(x$RBI)
x$SB<-as.numeric(x$SB)
x$CS<-as.numeric(x$CS)
x$BB.<-as.numeric(gsub("%","", x$BB.))
x$K.<-as.numeric(gsub("%","", x$K.))
x$ISO<-as.numeric(x$ISO)
x$BABIP<-as.numeric(x$BABIP)
x$BB<-round(x$PA*x$BB./100)
x$K<-round(x$PA*x$K./100)
my_data<-rbind(x,my_data)
}
}
}
write.csv(my_data, "./output/position_logs.csv", row.names=FALSE) #Export data to csv file
#sink("./output/log.txt", split = TRUE)#output log file
#--------------------Create game log for pitchers players-----------------------------
#Create table of players and IDs for fangraph links
pitcher_id<-read.csv("./input/SS_pitchers.csv", header=TRUE)
unique_pitcher<-unique(pitcher_id[,1:2]) #remove duplicate players (both teams)
my_data=NULL
#Scrape data and combine into a single file
for (i in unique_pitcher[,2]) {
test=try(read_html(paste("http://www.fangraphs.com/statsd.aspx?playerid=",i,"&season=2018",sep="",collapse=NULL)),TRUE)
if(class(test)!= "try-error"){
x<-read_html(paste("http://www.fangraphs.com/statsd.aspx?playerid=",i,"&season=2018",sep="",collapse=NULL))
x<-x %>%
html_nodes("#DailyStats1_dgSeason1_ctl00")%>%html_table(header=NA, )
if(length(x) != 0) {
x<-subset(data.frame(x), !(data.frame(x)$Date=="Date" | data.frame(x)$Date=="Total"))#converts to a data frame and drops duplicate headers and season totals
x$BIS<-as.numeric(unique_pitcher[match(i,unique_pitcher$BIS),2]) #Add BIS Number order from player list
x$IP<-as.numeric(x$IP)
x$H<-as.numeric(x$H)
x$ER<-as.numeric(x$ER)
x$HR<-as.numeric(x$HR)
x$BB<-as.numeric(x$BB)
x$SO<-as.numeric(x$SO)
x$BABIP<-as.numeric(x$BABIP)
my_data<-rbind(x,my_data)
}
}
}
write.csv(my_data, "./output/pitcher_logs.csv", row.names=FALSE) #Export data to csv file
#Minor League Data
source('C:/Users/Jeff/Documents/Scoresheet Stats/Code/minor_game_logs.r')
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/bin/pandoc")
rmarkdown::render("C:/Users/Jeff/Documents/Scoresheet Stats/Code/ss_analysis.Rmd", "html_document")
source('C:/Users/Jeff/Documents/Scoresheet Stats/code/scoresheet_logs.R')
###Author: Jeff Graham
###Date: March 30, 2018
###This file creates an HTML report of scoresheet stats and emails the results
#Create Report
source('C:/Users/Jeff/Documents/Scoresheet Stats/code/scoresheet_logs.R')
library(mailR)
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "superawesomes", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "superawesomes", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
getwd()
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("./code/ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "superawesomes", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
###Author: Jeff Graham
###Date: March 30, 2018
###This file creates an HTML report of scoresheet stats and emails the results
#Create Report
source('C:/Users/Jeff/Documents/Scoresheet Stats/code/scoresheet_logs.R')
library(mailR)
#send email
date<-format(Sys.Date(), format="%B %d %Y")
sender <- "scoresheetstats@gmail.com" # Replace with a valid address
recipients <- c("jpgraham15@gmail.com") # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject=paste("Scoresheet Stats as of",date),
body = paste("Weekly results as of",date),
attach.files = c("./code/ss_analysis.html"),
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "scoresheetstats", passwd = "superawesomes", ssl = TRUE),
authenticate = TRUE,
send = TRUE)
end<-Sys.Date()-1
j<-as.POSIXlt(Sys.Date())$wday
j<-ifelse(j == 0, 7, ifelse(j==1,8,j)) #Change Sundays to 7
start <- Sys.Date()-j
end<-Sys.Date()-1
j<-as.POSIXlt(Sys.Date())$wday
j<-ifelse(j == 0, 7, ifelse(j==1,8,j)) #Change Sundays to 7
start <- Sys.Date()-j
#load packages
requirements<- c("dplyr", "knitr", "data.table")
for(requirement in requirements){if(!(requirement %in% installed.packages()))
install.packages(requirement)}
lapply(requirements, require, character.only=T)
my_data<-read.csv("./output/position_logs.csv", header=TRUE) #read in game log data for position players
getwd()
#load packages
requirements<- c("dplyr", "knitr", "data.table")
for(requirement in requirements){if(!(requirement %in% installed.packages()))
install.packages(requirement)}
lapply(requirements, require, character.only=T)
my_data<-read.csv("../output/position_logs.csv", header=TRUE) #read in game log data for position players
my_data$Date<-as.Date(my_data$Date) #Format date variable
j<-as.POSIXlt(Sys.Date())$wday #Count number of days after last Sunday
j<-ifelse(j == 0, 7, ifelse(j==1,8,j)) #Change Sundays to 7
my_data <- subset(my_data, my_data$Date>Sys.Date()-j) #Include only games since last Sunday
#Sum Statistics
PA<-setNames(aggregate(my_data$PA, by = list(my_data$BIS), FUN = sum),c("BIS","PA"))
hits<-setNames(aggregate(my_data$H, by = list(my_data$BIS), FUN = sum),c("BIS","H"))
X2B<-setNames(aggregate(my_data$X2B, by = list(my_data$BIS), FUN = sum),c("BIS","X2B"))
X3B<-setNames(aggregate(my_data$X3B, by = list(my_data$BIS), FUN = sum),c("BIS","X3B"))
HR<-setNames(aggregate(my_data$HR, by = list(my_data$BIS), FUN = sum),c("BIS","HR"))
BB<-setNames(aggregate(my_data$BB, by = list(my_data$BIS), FUN = sum),c("BIS","BB"))
SO<-setNames(aggregate(my_data$K, by = list(my_data$BIS), FUN = sum),c("BIS","SO"))
SB<-setNames(aggregate(my_data$SB, by = list(my_data$BIS), FUN = sum),c("BIS","SB"))
CS<-setNames(aggregate(my_data$CS, by = list(my_data$BIS), FUN = sum),c("BIS","CS"))
#Merge statistics
my_data<-Reduce(function(x, y) merge(x, y, all=TRUE), list(PA, hits, X2B, X3B, HR, BB, SO, SB, CS))
#Merge with player list
player_id<-read.csv("./input/SS_position_players.csv", header=TRUE)
#load packages
requirements<- c("dplyr", "knitr", "data.table")
for(requirement in requirements){if(!(requirement %in% installed.packages()))
install.packages(requirement)}
lapply(requirements, require, character.only=T)
my_data<-read.csv("../output/position_logs.csv", header=TRUE) #read in game log data for position players
my_data$Date<-as.Date(my_data$Date) #Format date variable
j<-as.POSIXlt(Sys.Date())$wday #Count number of days after last Sunday
j<-ifelse(j == 0, 7, ifelse(j==1,8,j)) #Change Sundays to 7
my_data <- subset(my_data, my_data$Date>Sys.Date()-j) #Include only games since last Sunday
#Sum Statistics
PA<-setNames(aggregate(my_data$PA, by = list(my_data$BIS), FUN = sum),c("BIS","PA"))
hits<-setNames(aggregate(my_data$H, by = list(my_data$BIS), FUN = sum),c("BIS","H"))
X2B<-setNames(aggregate(my_data$X2B, by = list(my_data$BIS), FUN = sum),c("BIS","X2B"))
X3B<-setNames(aggregate(my_data$X3B, by = list(my_data$BIS), FUN = sum),c("BIS","X3B"))
HR<-setNames(aggregate(my_data$HR, by = list(my_data$BIS), FUN = sum),c("BIS","HR"))
BB<-setNames(aggregate(my_data$BB, by = list(my_data$BIS), FUN = sum),c("BIS","BB"))
SO<-setNames(aggregate(my_data$K, by = list(my_data$BIS), FUN = sum),c("BIS","SO"))
SB<-setNames(aggregate(my_data$SB, by = list(my_data$BIS), FUN = sum),c("BIS","SB"))
CS<-setNames(aggregate(my_data$CS, by = list(my_data$BIS), FUN = sum),c("BIS","CS"))
#Merge statistics
my_data<-Reduce(function(x, y) merge(x, y, all=TRUE), list(PA, hits, X2B, X3B, HR, BB, SO, SB, CS))
#Merge with player list
player_id<-read.csv("../input/SS_position_players.csv", header=TRUE)
my_data<-merge(my_data,player_id,by = 'BIS')
my_data$OBP<-signif((my_data$H+my_data$BB)/my_data$PA,digits=3)
my_data$SLG<-signif((my_data$H-my_data$X2B-my_data$X3B-my_data$HR+2*my_data$X2B+3*my_data$X3B+4*my_data$HR)/(my_data$PA-my_data$BB),digits=3)
my_data$OPS<-(my_data$OBP+my_data$SLG)
my_data<-my_data[order(my_data$Order),] #Order by batting order
NL_my_data<-subset(my_data,League=="NL")
BL_my_data<-subset(my_data,League=="BL")
#--------Print statistics for pitchers------------
pitcher_data<-read.csv("../output/pitcher_logs.csv", header=TRUE) #read in game log data for pitchers
pitcher_data$Date<-as.Date(pitcher_data$Date) #Format date variable
pitcher_data <- subset(pitcher_data, pitcher_data$Date>Sys.Date()-j) #Include only games since last Sunday
#Calculate corrected IP
pitcher_data$aIP<-(floor(pitcher_data$IP)+(pitcher_data$IP-floor(pitcher_data$IP))/.3)
#Calculate weighted average BABIP
setDT(pitcher_data)
pitcher_data[, BABIP := weighted.mean(BABIP,IP), by=BIS]
#Sum Pitcher Statistics
IP<-setNames(aggregate(pitcher_data$aIP, by = list(pitcher_data$BIS), FUN = sum),c("BIS","IP"))
ER<-setNames(aggregate(pitcher_data$ER, by = list(pitcher_data$BIS), FUN = sum),c("BIS","ER"))
H<-setNames(aggregate(pitcher_data$H, by = list(pitcher_data$BIS), FUN = sum),c("BIS","H"))
HR<-setNames(aggregate(pitcher_data$HR, by = list(pitcher_data$BIS), FUN = sum),c("BIS","HR"))
SO<-setNames(aggregate(pitcher_data$SO, by = list(pitcher_data$BIS), FUN = sum),c("BIS","SO"))
BB<-setNames(aggregate(pitcher_data$BB, by = list(pitcher_data$BIS), FUN = sum),c("BIS","BB"))
BABIP<-setNames(aggregate(pitcher_data$BABIP, by = list(pitcher_data$BIS), FUN = mean),c("BIS","BABIP"))
#Merge pitcher statistics
pitcher_data<-Reduce(function(x, y) merge(x, y, all=TRUE), list(IP, ER, H, HR, SO, BB, BABIP))
#Add more stats
pitcher_data$WHIP<-signif((pitcher_data$BB+pitcher_data$H)/pitcher_data$IP,digits=2)
pitcher_data$ERA<-signif((pitcher_data$ER*9)/pitcher_data$IP,digits=3)
pitcher_data$IP<-signif((floor(pitcher_data$IP)+(pitcher_data$IP-floor(pitcher_data$IP))/3.3),digits=2)
#pitcher_data$aIP<-(floor(pitcher_data$IP)+(pitcher_data$IP-floor(pitcher_data$IP))/.3)
pitcher_data$BABIP<-signif(pitcher_data$BABIP,digits=3)
#Merge with player list
pitcher_id<-read.csv("../input/SS_pitchers.csv", header=TRUE)
pitcher_data<-merge(pitcher_data,pitcher_id,by = 'BIS')
pitcher_data<-pitcher_data[order(pitcher_data$Order),]
NL_pitcher_data<-subset(pitcher_data,League=="NL")
BL_pitcher_data<-subset(pitcher_data,League=="BL")
#Import Minor league data
ML_my_data<-read.csv("../output/ML_position_logs.csv", header=TRUE) #read in game log data for position players
ML_pitcher_data<-read.csv("./output/ML_pitcher_logs.csv", header=TRUE) #read in game log data for pitchers
library(rvest)
library(XML)
#Create table of players and IDs for fangraph links
player_id<-read.csv("../input/SS_minors.csv", header=TRUE)
my_data=NULL
#Scrape position player data and combine into a single file
for (i in player_id[,2]) {
x<-read_html(paste("http://www.fangraphs.com/statsd.aspx?playerid=",i
,"&position=",player_id[match(i,player_id$BIS_Number),4],"&type=-1&gds=&gde=","&season=2017",sep="",collapse=NULL))
x<-x %>%
html_nodes("#DailyStats1_dgSeason1_ctl00")%>%html_table(header=NA, )
if(length(x) != 0) {
x<-subset(data.frame(x),(data.frame(x)$Date=="Total"))#converts to a data frame and only keeps season totals
x$Name<-as.character(player_id[match(i,player_id$BIS_Number),1]) #Add name variable from player list
x$League<-as.character(player_id[match(i,player_id$BIS_Number),3]) #Add league from player list
x$AB<-as.numeric(x$AB)
x$PA<-as.numeric(x$PA)
x$H<-as.numeric(x$H)
x$X2B<-as.numeric(x$X2B)
x$X3B<-as.numeric(x$X3B)
x$HR<-as.numeric(x$HR)
x$R<-as.numeric(x$R)
x$SF<-as.numeric(x$SF)
x$SH<-as.numeric(x$SH)
x$BB<-as.numeric(x$BB)
x$IBB<-as.numeric(x$IBB)
x$HBP<-as.numeric(x$HBP)
x$"BB%"<-as.numeric(round(100*x$BB/x$AB),digits=1)
x$SO<-as.numeric(x$SO)
x$"SO%"<-as.numeric(round(100*x$SO/x$AB),digits=1)
x$RBI<-as.numeric(x$RBI)
x$SB<-as.numeric(x$SB)
x$CS<-as.numeric(x$CS)
#x$BABIP<-as.numeric(x$BABIP)
x$AVG<-as.numeric(x$AVG)
#x$SLG<-as.numeric(x$SLG)
x$OBP<-as.numeric(signif((x$H+x$BB+x$HBP)/(x$AB+x$BB+x$HBP+x$SF+x$SH),digits=3))
x$SLG<-as.numeric(signif((x$H-x$X2B-x$X3B-x$HR+2*x$X2B+3*x$X3B+4*x$HR)/x$AB,digits=3))
x$OPS<-(x$OBP+x$SLG)
#x$BB.<-as.numeric(gsub("%","", x$BB.))
#x$K.<-as.numeric(gsub("%","", x$K.))
#x$ISO<-as.numeric(x$ISO)
#x$BABIP<-as.numeric(x$BABIP)
#x$BB<-round(x$PA*x$BB./100)
#x$K<-round(x$PA*x$K./100)
my_data<-rbind(x,my_data)
}
}
#Sort by SLG%
ML_my_data<-my_data[order(-my_data$OPS),]
write.csv(ML_my_data, "../output/ML_position_logs.csv", row.names=FALSE) #Export data to csv file
#Create table of players and IDs for fangraph links
pitcher_id<-read.csv("../input/SS_minor_pitchers.csv", header=TRUE)
pitcher_data=NULL
#Scrape position player data and combine into a single file
for (i in pitcher_id[,2]) {
y<-read_html(paste("https://www.fangraphs.com/statsd.aspx?playerid=", i, "&position=P&type=-1&gds=&gde=&season=",sep="",collapse=NULL))
y<-y %>%
html_nodes("#DailyStats1_dgSeason1_ctl00")%>%html_table(header=NA, )
if(length(y) != 0) {
y<-subset(data.frame(y),(data.frame(y)$Date=="Total"))#converts to a data frame and only keeps season totals
y$Name<-as.character(pitcher_id[match(i,pitcher_id$BIS_Number),1]) #Add name variable from player list
y$League<-as.character(pitcher_id[match(i,pitcher_id$BIS_Number),3]) #Add league from player list
y$IP<-as.numeric(y$IP)
y$GS<-as.numeric(y$GS)
y$TBF<-as.numeric(y$TBF)
y$H<-as.numeric(y$H)
y$HR<-as.numeric(y$HR)
y$BB<-as.numeric(y$BB)
y$HBP<-as.numeric(y$HBP)
y$SO<-as.numeric(y$SO)
y$ERA<-as.numeric(y$ERA)
y$AVG<-as.numeric(round(y$H/(y$TBF-y$BB-y$HBP),digits=3))
y$BABIP<-as.numeric(round((y$H-y$HR)/(y$TBF-y$BB-y$HBP-y$SO-y$HR),digits=3)) #Approximation:does not include in sacrifices
y$WHIP<-as.numeric(round((y$H+y$BB)/y$IP,digits=2))
y$"BB%"<-as.numeric(round(100*y$BB/y$TBF,digits=1))
y$"SO%"<-as.numeric(round(100*y$SO/y$TBF,digits=1))
pitcher_data<-rbind(y,pitcher_data)
}
}
#Sort by League
ML_pitcher_data<-pitcher_data[order(pitcher_data$AVG),]
write.csv(ML_pitcher_data, "../output/ML_pitcher_logs.csv", row.names=FALSE) #Export data to csv file
library(rvest)
library(XML)
#Create table of players and IDs for fangraph links
player_id<-read.csv("../input/SS_minors.csv", header=TRUE)
my_data=NULL
#Scrape position player data and combine into a single file
for (i in player_id[,2]) {
x<-read_html(paste("http://www.fangraphs.com/statsd.aspx?playerid=",i
,"&position=",player_id[match(i,player_id$BIS_Number),4],"&type=-1&gds=&gde=","&season=2017",sep="",collapse=NULL))
x<-x %>%
html_nodes("#DailyStats1_dgSeason1_ctl00")%>%html_table(header=NA, )
if(length(x) != 0) {
x<-subset(data.frame(x),(data.frame(x)$Date=="Total"))#converts to a data frame and only keeps season totals
x$Name<-as.character(player_id[match(i,player_id$BIS_Number),1]) #Add name variable from player list
x$League<-as.character(player_id[match(i,player_id$BIS_Number),3]) #Add league from player list
x$AB<-as.numeric(x$AB)
x$PA<-as.numeric(x$PA)
x$H<-as.numeric(x$H)
x$X2B<-as.numeric(x$X2B)
x$X3B<-as.numeric(x$X3B)
x$HR<-as.numeric(x$HR)
x$R<-as.numeric(x$R)
x$SF<-as.numeric(x$SF)
x$SH<-as.numeric(x$SH)
x$BB<-as.numeric(x$BB)
x$IBB<-as.numeric(x$IBB)
x$HBP<-as.numeric(x$HBP)
x$"BB%"<-as.numeric(round(100*x$BB/x$AB),digits=1)
x$SO<-as.numeric(x$SO)
x$"SO%"<-as.numeric(round(100*x$SO/x$AB),digits=1)
x$RBI<-as.numeric(x$RBI)
x$SB<-as.numeric(x$SB)
x$CS<-as.numeric(x$CS)
#x$BABIP<-as.numeric(x$BABIP)
x$AVG<-as.numeric(x$AVG)
#x$SLG<-as.numeric(x$SLG)
x$OBP<-as.numeric(signif((x$H+x$BB+x$HBP)/(x$AB+x$BB+x$HBP+x$SF+x$SH),digits=3))
x$SLG<-as.numeric(signif((x$H-x$X2B-x$X3B-x$HR+2*x$X2B+3*x$X3B+4*x$HR)/x$AB,digits=3))
x$OPS<-(x$OBP+x$SLG)
#x$BB.<-as.numeric(gsub("%","", x$BB.))
#x$K.<-as.numeric(gsub("%","", x$K.))
#x$ISO<-as.numeric(x$ISO)
#x$BABIP<-as.numeric(x$BABIP)
#x$BB<-round(x$PA*x$BB./100)
#x$K<-round(x$PA*x$K./100)
my_data<-rbind(x,my_data)
}
}
#Sort by SLG%
ML_my_data<-my_data[order(-my_data$OPS),]
write.csv(ML_my_data, "../output/ML_position_logs.csv", row.names=FALSE) #Export data to csv file
#Create table of players and IDs for fangraph links
pitcher_id<-read.csv("../input/SS_minor_pitchers.csv", header=TRUE)
pitcher_data=NULL
#Scrape position player data and combine into a single file
for (i in pitcher_id[,2]) {
y<-read_html(paste("https://www.fangraphs.com/statsd.aspx?playerid=", i, "&position=P&type=-1&gds=&gde=&season=",sep="",collapse=NULL))
y<-y %>%
html_nodes("#DailyStats1_dgSeason1_ctl00")%>%html_table(header=NA, )
if(length(y) != 0) {
y<-subset(data.frame(y),(data.frame(y)$Date=="Total"))#converts to a data frame and only keeps season totals
y$Name<-as.character(pitcher_id[match(i,pitcher_id$BIS_Number),1]) #Add name variable from player list
y$League<-as.character(pitcher_id[match(i,pitcher_id$BIS_Number),3]) #Add league from player list
y$IP<-as.numeric(y$IP)
y$GS<-as.numeric(y$GS)
y$TBF<-as.numeric(y$TBF)
y$H<-as.numeric(y$H)
y$HR<-as.numeric(y$HR)
y$BB<-as.numeric(y$BB)
y$HBP<-as.numeric(y$HBP)
y$SO<-as.numeric(y$SO)
y$ERA<-as.numeric(y$ERA)
y$AVG<-as.numeric(round(y$H/(y$TBF-y$BB-y$HBP),digits=3))
y$BABIP<-as.numeric(round((y$H-y$HR)/(y$TBF-y$BB-y$HBP-y$SO-y$HR),digits=3)) #Approximation:does not include in sacrifices
y$WHIP<-as.numeric(round((y$H+y$BB)/y$IP,digits=2))
y$"BB%"<-as.numeric(round(100*y$BB/y$TBF,digits=1))
y$"SO%"<-as.numeric(round(100*y$SO/y$TBF,digits=1))
pitcher_data<-rbind(y,pitcher_data)
}
}
#Sort by League
ML_pitcher_data<-pitcher_data[order(pitcher_data$AVG),]
write.csv(ML_pitcher_data, "../output/ML_pitcher_logs.csv", row.names=FALSE) #Export data to csv file
#Create table of players and IDs for fangraph links
player_id<-read.csv("../input/SS_minors.csv", header=TRUE)
my_data=NULL
getwd()
